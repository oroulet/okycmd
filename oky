#!/usr/bin/python
"""
command line interface to onkyo.py
"""

import sys
import os
import onkyo

def usage():
    print """
    oky is a command line client to the networked onkyo receivers
    Usage:  oky [options] [zone] command arguments
    The IP address to use can set using the OKY_ADDRESS environment
    or set using the oky ip command line
    examples:
        oky ip 10.0.0.112       ; set default ip address og receiver
        oky state               ; print state
        oky source PC           ; set source to PC
        oky z2 source SOURCE       ; set zone 2 source to the same as main zone
        oky on                  ; power on main zone
        oky z2 off              ; shut down zone 2
        oky +                   ; increase volume
        oky -                   ; decrease volume
        
        """

def get_config_file():
    if os.name == "nt":
        path = os.environ["APPDATA"]
        path = os.path.join(path, "oky", "okyrc")
    else:
        path = os.environ["HOME"]
        path = os.path.join(path, ".okyrc")
    return path

def save_ip(address):
    config = open(get_config_file(), "w")
    config.write(address)
    config.close()

def get_ip():
    path = get_config_file()
    if not os.path.isfile(path):
        return None
    else:
        config = open(get_config_file())
        address =  config.readline()
        config.close()
        return address


if __name__ == "__main__":
    if not len(sys.argv) > 1:
        usage()
    else:
        cmd = sys.argv[1]
        cmd2 = ""
        cmd3 = ""
        if len(sys.argv) > 2:
            cmd2 = sys.argv[2]
        if len(sys.argv) > 3:
            cmd3 = sys.argv[3]

        if cmd in ("-h", "-help", "help"):
            usage()
        elif cmd in ("ip", "address"):
            save_ip( cmd2 )
            print "stored default ip address:", cmd2
            sys.exit(1)

        if os.environ.has_key("OKY_ADDRESS"):
            ip = os.environ["OKY_ADDRESS"]
        else:
            ip = get_ip()
        if not ip:
            usage()
            sys.exit(1)

        oky = onkyo.Onkyo(ip=ip)
        oky.connect()


        if cmd == "z2":
            if cmd2 == "off":
                oky.z2off()
            elif cmd2 == "on":
                oky.z2power()
            elif cmd2 == "+":
                oky.z2volumeUp()
            elif cmd2 == "-":
                oky.z2volumeDown()
            elif cmd2 in ("vol", "volume"):
                if cmd3:
                    val = oky.z2setVolume(cmd3)
                else:
                    val = oky.z2getVolume()
                print "Volume is: ", val 
            elif cmd2 == "source":
                if cmd3:
                    oky.z2setSource(cmd3)
                else:
                    source =  oky.z2getSource()
                    print "Source is: ", source
            elif cmd2 == "bass":
                if cmd3 in ("+", "up"):
                    bass, treble = oky.z2setBassUp()
                elif cmd3 in ("-", "down"):
                    bass, treble = oky.z2setBassDown()
                else:
                    bass, treble = oky.z2getTone()
                print "Bass: ", bass
                print "Treble: ", treble
            else:
                usage()
        elif cmd == "state":
            oky.printState()
        elif cmd == "off":
            oky.off()
        elif cmd == "on":
            oky.power()
        elif cmd == "source":
            if cmd2:
                oky.setSource(cmd2)
            else:
                source =  oky.getSource()
                print "Source is: ", source
        elif cmd == "+":
            val = oky.volumeUp()
            print "Volume: ", val
        elif cmd == "-":
            val = oky.volumeDown()
            print "Volume: ", val

        elif cmd in ("vol", "volume"):
            if cmd2:
                val = oky.setVolume(cmd2)
            else:
                val = oky.getVolume()
            print "Volume is: ", val 
        else:
            usage()
        oky.close()


