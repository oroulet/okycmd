#!/usr/bin/python
"""
command line interface to onkyo.py
"""

import sys
import os
import argparse
import socket

import onkyo


def get_config_file():
    if os.name == "nt":
        path = os.environ["APPDATA"]
        path = os.path.join(path, "oky", "okyrc")
    else:
        path = os.environ["HOME"]
        path = os.path.join(path, ".okyrc")
    return path

def save_ip(address):
    config = open(get_config_file(), "w")
    config.write(address)
    config.close()

def get_ip():
    path = get_config_file()
    if not os.path.isfile(path):
        return None
    else:
        config = open(get_config_file())
        address =  config.readline()
        config.close()
        return address

cmd_examples = """
cmd examples:
    oky ip 10.0.0.112       ; set default ip address og receiver
    oky state               ; print state 
    oky source PC           ; set source to PC
    oky source              ; print current source and available sources
    oky z2 source SOURCE    ; set zone 2 source to the same as main zone
    oky source DLNA         ; set source DLNA(upnp) (this is a sub NET source) 
    oky source NETRADIO     ; set source NET/RADIO (this is a sub NET source) 
    oky on                  ; power on main zone
    oky z2 off              ; shut down zone 2
    oky +                   ; increase volume
    oky - 5                 ; decrease volume of 5 unit
    oky cmd IFVQSTN         ; send ISCP command to receiver
        
"""
def main(oky, parser):
    if cmd == "log":
        oky.log()
    elif cmd == "cmd":
        if cmd2:
            print("Sending raw command to receiver", cmd2)
            print(oky.sendCommand(cmd2))
    elif cmd == "z2":
        #print "z2 command", cmd, cmd2, cmd3
        if cmd2 in ("off", "stop"):
            val = oky.z2off()
            print("Power: ", val)
        elif cmd2 in ("start", "on"):
            val = oky.z2power()
            print("Power: ", val)
        elif cmd2 == "+":
            val = oky.z2volumeUp(cmd3)
            print("Volume is: ", val) 
        elif cmd2 == "-":
            val = oky.z2volumeDown(cmd3)
            print("Volume: ", val) 
        elif cmd2 in ("vol", "volume"):
            if cmd3:
                val = oky.z2setVolume(cmd3)
            else:
                val = oky.z2getVolume()
            print("Volume: ", val) 
        elif cmd2 == "source":
            if cmd3:
                source = oky.z2setSource(cmd3)
                print("Source: ", oky.z2getSource())
            else:
                source =  oky.z2getSource()
                sources = oky.getSources()
                print("Source: ", source)
                print("Available sources: ", sources)
        elif cmd2 == "bass":
            if cmd3 in ("+", "up"):
                bass, treble = oky.z2bassUp()
            elif cmd3 in ("-", "down"):
                bass, treble = oky.z2bassDown()
            else:
                bass, treble = oky.z2getTone()
            print("Bass: ", bass)
            print("Treble: ", treble)
        else:
            parser.print_help()
    elif cmd == "state":
        oky.printState()
    elif cmd in("stop", "off"):
        val = oky.off()
        print("Power: ", val)
    elif cmd in ("on", "start"):
        val = oky.power()
        print("Power: ", val)
    elif cmd == "source":
        if cmd2:
            source = oky.setSource(cmd2)
        else:
            source =  oky.getSource()
        sources = oky.getSources()
        print("Source: ", source)
        print("Available sources: ", sources)
    elif cmd == "+":
        val = oky.volumeUp(cmd2)
        print("Volume: ", val)
    elif cmd == "-":
        val = oky.volumeDown(cmd2)
        print("Volume: ", val)
    elif cmd in ("vol", "volume"):
        if cmd2:
            val = oky.setVolume(cmd2)
        else:
            val = oky.getVolume()
        print("Volume: ", val) 
    else:
        parser.print_help()

if __name__ == "__main__":


    parser = argparse.ArgumentParser(description='Send commands to an Onkyo receiver', add_help=False, epilog=cmd_examples, formatter_class=argparse.RawDescriptionHelpFormatter )
    #parser.add_argument('--help', '-h', help='Display help', default=False, action="store_true")
    parser.add_argument('--verbose', '-v', default=False, action="store_true", help='be verbose')
    parser.add_argument('--host', "--ip", "-h", default=None, help='set ip address')
    parser.add_argument('--port', "-p",  default=60128, help='set port')
    #parser.add_argument('cmd', nargs="+", help='command to send')
    parser.add_argument('cmd', nargs="*", help="see examples")
    
    args = parser.parse_args()

    #if args.help:
        #parser.print_help()
        #sys.exit(0)
    if not args.cmd:
        parser.print_help()
        sys.exit(1)
    else:
        cmd = args.cmd[0]
        cmd2 = ""
        cmd3 = ""
        if len(args.cmd) > 1:
            cmd2 = args.cmd[1]
        if len(args.cmd) > 2:
            cmd3 = args.cmd[2]

        if cmd in ("host", "ip", "address"):
            if cmd2:
                save_ip( cmd2 )
                print("stored default ip address:", cmd2)
                sys.exit(0)
            else:
                parser.print_help()
                sys.exit(1)
        
        if args.host:
            host = args.host
        elif "OKY_ADDRESS" in os.environ:
            host = os.environ["OKY_ADDRESS"]
        else:
            host = get_ip()
        if not host:
            parser.print_help()
            sys.exit(1)

        oky = onkyo.Onkyo(host=host, port=args.port, verbose=args.verbose)
        try:
            oky.connect()
        except socket.error as ex:
            print("Error connecting to device: ", ex)
            sys.exit(1)

        main(oky, parser)
        oky.close()


