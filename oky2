#!/usr/bin/python
"""
command line interface to onkyo.py
"""

import sys
import os
import argparse

import onkyo


def get_config_file():
    if os.name == "nt":
        path = os.environ["APPDATA"]
        path = os.path.join(path, "oky", "okyrc")
    else:
        path = os.environ["HOME"]
        path = os.path.join(path, ".okyrc")
    return path

def save_ip(address):
    config = open(get_config_file(), "w")
    config.write(address)
    config.close()

def get_ip():
    path = get_config_file()
    if not os.path.isfile(path):
        return None
    else:
        config = open(get_config_file())
        address =  config.readline()
        config.close()
        return address

cmd_examples = """
cmd examples:
    oky ip 10.0.0.112       ; set default ip address og receiver
    oky state               ; print state 
    oky source PC           ; set source to PC
    oky z2 source SOURCE    ; set zone 2 source to the same as main zone
    oky on                  ; power on main zone
    oky z2 off              ; shut down zone 2
    oky +                   ; increase volume
    oky -                   ; decrease volume
        
"""


if __name__ == "__main__":


    parser = argparse.ArgumentParser(description='Send commands to an Onkyo receiver', add_help=False, epilog=cmd_examples, formatter_class=argparse.RawDescriptionHelpFormatter )
    #parser.add_argument('--help', '-h', help='Display help', default=False, action="store_true")
    parser.add_argument('--verbose', '-v', default=False, action="store_true", help='be verbose')
    parser.add_argument('--host', "--ip", "-h", default=None, help='set ip address')
    parser.add_argument('--port', "-p",  default=60128, help='set port')
    #parser.add_argument('cmd', nargs="+", help='command to send')
    parser.add_argument('cmd', nargs="*", help="kkkkkkkkkkkkkkK")
    
    args = parser.parse_args()

    #if args.help:
        #parser.print_help()
        #sys.exit(0)

    if True:
        cmd = args.cmd[0]
        cmd2 = ""
        cmd3 = ""
        if len(args.cmd) > 1:
            cmd2 = args.cmd[1]
        if len(args.cmd) > 2:
            cmd3 = args.cmd[2]

        if cmd in ("host", "ip", "address"):
            save_ip( cmd2 )
            print "stored default ip address:", cmd2
            sys.exit(1)
        
        if args.host:
            host = args.host
        elif os.environ.has_key("OKY_ADDRESS"):
            host = os.environ["OKY_ADDRESS"]
        else:
            host = get_ip()
        if not host:
            parser.print_help()
            sys.exit(1)

        oky = onkyo.Onkyo(host=host, port=args.port, verbose=args.verbose)
        oky.connect()


        if cmd == "z2":
            #print "z2 command", cmd, cmd2, cmd3
            if cmd2 == "off":
                oky.z2off()
            elif cmd2 == "on":
                oky.z2power()
            elif cmd2 == "+":
                oky.z2volumeUp()
            elif cmd2 == "-":
                oky.z2volumeDown()
            elif cmd2 in ("vol", "volume"):
                if cmd3:
                    val = oky.z2setVolume(cmd3)
                else:
                    val = oky.z2getVolume()
                print "Volume is: ", val 
            elif cmd2 == "source":
                if cmd3:
                    oky.z2setSource(cmd3)
                else:
                    source =  oky.z2getSource()
                    print "Source is: ", source
            elif cmd2 == "bass":
                if cmd3 in ("+", "up"):
                    bass, treble = oky.z2bassUp()
                elif cmd3 in ("-", "down"):
                    bass, treble = oky.z2bassDown()
                else:
                    bass, treble = oky.z2getTone()
                print "Bass: ", bass
                print "Treble: ", treble
            else:
                parser.print_help()
        elif cmd == "state":
            oky.printState()
        elif cmd == "off":
            oky.off()
        elif cmd == "on":
            oky.power()
        elif cmd == "source":
            if cmd2:
                oky.setSource(cmd2)
            else:
                source =  oky.getSource()
                print "Source is: ", source
        elif cmd == "+":
            val = oky.volumeUp()
            print "Volume: ", val
        elif cmd == "-":
            val = oky.volumeDown()
            print "Volume: ", val

        elif cmd in ("vol", "volume"):
            if cmd2:
                val = oky.setVolume(cmd2)
            else:
                val = oky.getVolume()
            print "Volume is: ", val 
        else:
            parser.print_help()
        print "oky: ok"
        oky.close()


